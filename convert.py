import random
import os
import timeit
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
from sklearn.feature_extraction.text import TfidfVectorizer 
#carpeta="C:/Users/L03040561/Desktop/embed/"
carpeta="/home/hs/Desktop/MalwareAPICallSequence/"
carpetaData=carpeta+"9010/";
carpetaModels=carpeta+"models/";
carpetaFolds=carpeta+"folds/"
etiquetas=["Adware", "Backdoor", "Downloader", "Dropper", "Spyware", "Trojan", "Virus", "Worms"];

def recode():
    f=open(carpeta+"data.txt")
    fOut=open(carpeta+"dataNum.txt", "w")
    palabras=dict()
    i=0;
    for line in f:
        line=line.rstrip();
        partes=line.split(" ")
        if partes[0] not in palabras.keys():
                palabras[partes[0]]=i
                i+=1
        fOut.write(str(palabras[partes[0]]))
        for parte in partes[1:]:
            if parte not in palabras.keys():
                palabras[parte]=i
                i+=1
            fOut.write(" "+str(palabras[parte]))
        fOut.write("\n");
    fOut.close();
    fOut=open(carpeta+"dict.txt", "w")
    for key in palabras.keys():
        fOut.write(key+":"+str(palabras[key])+"\n")
    fOut.close();
    f.close();



def obtenerPorEtiqueta():
    global carpeta
    fData=open(carpeta+"data.txt")
    fLabels=open(carpeta+"labels.csv")
    data=dict()
    for line in fData:
        label=fLabels.readline()
        line=line.rstrip();
        label=label.rstrip();
        if label not in data.keys():
            data[label]=[]
        data[label].append(line)
    fData.close();
    fLabels.close();
    for label in data.keys():
        fOut=open(carpeta+label+".txt", "w")
        random.shuffle(data[label])
        for elemento in data[label]:
            fOut.write(elemento)
            fOut.write("\n")
        fOut.close()

def obtenerFoldsPorEtiqueta():
    global carpeta
    global etiquetas
    subfolder=carpeta+"9010/"
    if not os.path.exists(subfolder):
        os.mkdir(subfolder);
    for etiqueta in etiquetas:
        abiertos=[]
        for i in range(1, 11):
            abiertos.append(open(subfolder+etiqueta+str(i)+".txt", "w"));
        f=open(carpeta+etiqueta+".txt");
        i=0;
        for line in f:
            abiertos[i].write(line);
            i+=1;
            i=i%10;
        for i in range(0, 10):
            abiertos[i].close();

def cargarDatosTrainingDoc2Vec(fold):
    global etiquetas
    global carpetaData
    docs=[]
    for etiqueta in etiquetas:
        i=0;
        for foldActual in range(1, 11):
            if foldActual==fold:
                continue
            fData=open(carpetaData+etiqueta+str(foldActual)+".txt");
            for line in fData:
                line=line.rstrip();
                partes=line.split(" ");
                docs.append(TaggedDocument(partes, [etiqueta+str(i)]))
                i+=1
            fData.close()
    return docs

def entrenarDoc2Vec(docs, ep,  fold):
    global carpetaModels
    global carpetaFolds
    global carpetaData
    model = Doc2Vec(docs, vector_size=100, window=2, min_count=1)
    model.train(docs, total_examples=model.corpus_count, epochs=ep)
    model.save(carpetaModels+"trained.full."+str(ep)+"."+str(fold))
    start = timeit.default_timer()
    model = Doc2Vec(docs, vector_size=100, window=2, min_count=1)
    model.train(docs, total_examples=model.corpus_count, epochs=ep)
    model.save(carpetaModels+"trained.full."+str(ep)+"."+str(fold))
    stop=timeit.default_timer();
    print("Entrenado en ",stop-start,"...Guardando")
    fOut=open(carpetaFolds+"doc2vec.training.full."+str(ep)+"."+str(fold)+".csv","w")
    for i in range(0, 100):
        fOut.write("f"+str(i)+",")
    fOut.write("type\n")
    for etiqueta in etiquetas:
        i=0;
        for foldActual in range(1, 11):
            if foldActual==fold:
                continue
            fData=open(carpetaData+etiqueta+str(foldActual)+".txt");
            for line in fData:
                for elemento in model.docvecs[etiqueta+str(i)]:
                        fOut.write(str(elemento)+",")
                fOut.write(etiqueta+"\n");
                i+=1
            fData.close();
    fOut.close();

def generarTrainingDoc2Vec(fold,ep):
    global carpeta
    global carpetaData
    global carpetaFolds
    global carpetaModels
    fOut=open(carpetaFolds+"doc2vec.testing.full."+str(ep)+"."+str(fold)+".csv","w")
    for i in range(0, 100):
        fOut.write("f"+str(i)+",")
    fOut.write("type\n")
    for etiqueta in etiquetas:
        fData=open(carpetaData+etiqueta+str(fold)+".txt");
        for line in fData:
            line=line.rstrip();
            partes=line.split(" ");
            model=Doc2Vec.load(carpetaModels+"trained.full."+str(ep)+"."+str(fold))
            obtained=model.infer_vector(partes, epochs=ep)
            for i in obtained:
                fOut.write(str(i)+",")
            fOut.write(etiqueta+"\n");
        fData.close();
    fOut.close();

def generateDoc2Vec(fold, ep):
    global carpeta
    global carpetaModels
    global carpetaFolds
    global carpetaData
    docs=cargarDatosTrainingDoc2Vec(fold)
    print("Cargados datos...Cargado",len(docs),"...Entrenando")
    entrenarDoc2Vec(docs, ep, fold);
    generarTrainingDoc2Vec(fold,ep)


def cargarDatosNoSecuencial(fold, training):
    global etiquetas
    global carpetaData
    docs=[]
    tags=[]
    for etiqueta in etiquetas:
        i=0;
        if training:
            for foldActual in range(1, 11):
                if foldActual==fold:
                    continue
                fData=open(carpetaData+etiqueta+str(foldActual)+".txt");
                for line in fData:
                    line=line.rstrip();
                    docs.append(line)
                    tags.append(etiqueta)
                    i+=1
                fData.close()
        else:
            fData=open(carpetaData+etiqueta+str(fold)+".txt");
            for line in fData:
                line=line.rstrip();
                docs.append(line)
                tags.append(etiqueta)
                i+=1
            fData.close()
    return (docs, tags)

def generarDatosTFIDF(filename, feature_names, vectors, tags):  
    fOut=open(filename,"w")
    for feature in feature_names:
        fOut.write(feature+",")
    fOut.write("type\n");
    for vec in range(0,vectors.shape[0]):
        for feat in range(0, len(feature_names)):
            fOut.write(str(vectors[vec, feat])+",")
        fOut.write(tags[vec]+"\n")
    fOut.close();

def generarTrainingTestingTFIDF(fold):
    stopWords=["abc"]
    global carpetaFolds
    print("Cargando datos")
    (docs, tags)=cargarDatosNoSecuencial(fold, True)
    print("Cargados",len(docs)," datos...Entrenando")
    start = timeit.default_timer()
    vect=TfidfVectorizer(stop_words=stopWords, token_pattern=r'(?u)\b[0-9]+\b')
    vectors=vect.fit_transform(docs)
    feature_names = vect.get_feature_names();
    stop = timeit.default_timer()
    print("Entrenado en", stop-start,"Escribiendo training" )
    generarDatosTFIDF(carpetaFolds+"tfidf.training.full."+str(fold)+".csv", feature_names, vectors, tags);
    #Generate testing
    print("Escribiendo testing")
    (docs, tags)=cargarDatosNoSecuencial(fold, False)
    vectors=vect.transform(docs)
    generarDatosTFIDF(carpetaFolds+"tfidf.testing.full."+str(fold)+".csv", feature_names, vectors, tags);
   



def calcularUnicos():
    global carpeta
    f=open(carpeta+"data.txt")
    valores=set()
    for line in f:
        line=line.rstrip();
        partes=line.split(" ")
        for elemento in partes:
            valores.add(elemento)
    f.close();
    b=list(valores)
    b.sort()
    print(b)
    print(len(valores))




def generateFullWord2Vec(epochs):
    print("Generando modelos para epocas:",epochs)
    for i in range(1, 11):
        print("Entrando:",i) 
        generateDoc2Vec(i, epochs)
        

def oneHotEncode(line):
    line=line.rstrip()
    partes=line.split(" ")
    llamadas=set();
    encoded=[]
    for elemento in partes:
        llamadas.add(elemento)
    for i in range(0, 278):
        encoded.append("0");
    for elemento in llamadas:
        encoded[int(elemento)]="1"
    return ",".join(encoded)
    

def oneHotEncodingFold(fold):
    global etiquetas
    global carpetaData
    docs=[]
    tags=[]
    fOutTraining=open(carpetaFolds+"ohe.training.full."+str(fold)+".csv", "w")
    fOutTesting=open(carpetaFolds+"ohe.testing.full."+str(fold)+".csv", "w")
    for i in range(0, 278):
        fOutTraining.write("f"+str(i)+",")
        fOutTesting.write("f"+str(i)+",")
    fOutTraining.write("type\n")
    fOutTesting.write("type\n")
    for etiqueta in etiquetas:
        for foldActual in range(1, 11):
            fData=open(carpetaData+etiqueta+str(foldActual)+".txt");
            for line in fData:
                encoded=oneHotEncode(line)+","+etiqueta+"\n"
                if foldActual==fold:
                    fOutTesting.write(encoded)
                else:
                    fOutTraining.write(encoded)
    fOutTraining.close()
    fOutTesting.close()
                   
                
                
                   
                    

def generateFullTFIDFyOneHot():
    for i in range(1, 11):
        generarTrainingTestingTFIDF(i)
        oneHotEncodingFold(i)

#recode();
#obtenerPorEtiqueta();
#obtenerFoldsPorEtiqueta();
#generateFull(1);
#generateFull(100);
#generateFull(200);
#generateFull(300);
#generarTrainingTestingTFIDF(1)
#oneHotEncodingFold(1);

    

            
         






